pipeline {
    agent {
        label 'PerfCi'
    }
    environment {
        INSTALL_OCP_RESOURCES = 'True'
        CNV_NIGHTLY_CHANNEL = 'False' // CNV Stable Operator
        CNV_VERSION = credentials('perfci_upgrade_current_cnv_version')
        LSO_VERSION = credentials('perfci_upgrade_current_lso_version')
        ODF_VERSION = credentials('perfci_upgrade_current_odf_version')
        CONTACT_EMAIL1 = credentials('perfci_contact_email1')
        PROVISION_USER = credentials('perfci_provision_user')
        PROVISION_IP = credentials('perfci_provision_ip')
        WORKER_DISK_IDS = credentials('perfci_worker_disk_ids')
        EXPECTED_NODES = credentials('perfci_expected_nodes')
        QUAY_BENCHMARK_RUNNER_REPOSITORY = credentials('perfci_quay_repository')
        KUBEADMIN_PASSWORD = readFile('/home/jenkins/.kube/kubeadmin-password').trim()
        KUBEADMIN_PASSWORD_PATH = '/home/jenkins/.kube/kubeadmin-password'
        KUBECONFIG_PATH = '/root/.kube/config'
        PRIVATE_KEY_PATH = '/home/jenkins/.ssh/provision_private_key'
        CONFIG_PATH = '/home/jenkins/.ssh/config'
        WORKSPACE = '/home/jenkins'
        CONTAINER_PRIVATE_KEY_PATH = '/root/.ssh/provision_private_key'
        WORKER_DISK_PREFIX = 'wwn-0x'
        PROVISION_PORT = 22
        NUM_ODF_DISK = 6
        PROVISION_TIMEOUT = 3600
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Clean the Jenkins workspace
                        echo "Cleaning Jenkins workspace"
                        deleteDir()
                        sh '''
                            # Check if the image exists
                            if [[ "$(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)" != "" ]]; then

                                # Get containers using the image
                                containers=$(sudo podman ps -a --filter ancestor=${QUAY_BENCHMARK_RUNNER_REPOSITORY} -q)

                                if [[ "$containers" != "" ]]; then
                                    echo "Stopping and removing containers using the image..."
                                    sudo podman stop $containers
                                    sudo podman rm -f $containers
                                fi

                                # Now remove the image
                                sudo podman rmi -f $(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)
                            fi
                        '''
                }
            }
        }

        stage('⚙️ SET SSH key') {
            steps {
                script {
                    sh 'mkdir -p $WORKSPACE/.ssh/'
                    sh 'sudo chmod 700 $WORKSPACE/.ssh/'
                    withCredentials([file(credentialsId: 'perfci_provision_private_key_file', variable: 'PROVISION_PRIVATE_KEY_FILE')]) {
                        sh "sudo cp ${PROVISION_PRIVATE_KEY_FILE} ${WORKSPACE}/.ssh/provision_private_key"
                        sh "sudo chown jenkins:jenkins ${WORKSPACE}/.ssh/provision_private_key"
                    }
                    sh 'sudo chmod 600 $PRIVATE_KEY_PATH'
                    sh '''
                        sudo cat > "$CONFIG_PATH" <<END
    Host provision
        HostName ${PROVISION_IP}
        User ${PROVISION_USER}
        IdentityFile $PRIVATE_KEY_PATH
        StrictHostKeyChecking no
        ServerAliveInterval 30
        ServerAliveCountMax 5
END
                    '''
                    sh 'sudo chmod 600 $CONFIG_PATH'
                }
            }
        }

        stage('Operators Deployment') {
        steps {
            script {
                // cnv first for “-virtualization” storage class name for Win bootstorm
                def resources = ['cnv', 'lso', 'odf', 'nhc_snr', 'infra', 'custom']

                for (resource in resources) {
                    echo "Run Operator Deployment for ${resource}"

                    // Create a stage for each resource
                    stage("${resource} Deployment") {
                        echo "Running deployment for ${resource}"
                        // Deployment code
                        script {
                            withCredentials([string(credentialsId: 'perfci_provision_ip', variable: 'PROVISION_IP')]) {
                                withCredentials([string(credentialsId: 'perfci_provision_user', variable: 'PROVISION_USER')]) {
                                    withCredentials([file(credentialsId: 'perfci_provision_private_key_file', variable: 'PROVISION_PRIVATE_KEY_FILE')]) {
                                        withCredentials([string(credentialsId: 'perfci_worker_disk_ids', variable: 'WORKER_DISK_IDS')]) {
                                                withCredentials([string(credentialsId: 'perfci_expected_nodes', variable: 'EXPECTED_NODES')]) {
                                                    // boolean value w/o ''
                                                    sh """
                                                        sudo podman run --rm \
                                                            -e INSTALL_OCP_RESOURCES=${INSTALL_OCP_RESOURCES}  \
                                                            -e INSTALL_RESOURCES_LIST='${resource}' \
                                                            -e EXPECTED_NODES='${EXPECTED_NODES}' \
                                                            -e CNV_NIGHTLY_CHANNEL=${CNV_NIGHTLY_CHANNEL} \
                                                            -e CNV_VERSION='${CNV_VERSION}' \
                                                            -e LSO_VERSION='${LSO_VERSION}' \
                                                            -e ODF_VERSION='${ODF_VERSION}' \
                                                            -e NUM_ODF_DISK='${NUM_ODF_DISK}' \
                                                            -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' \
                                                            -e PROVISION_IP='${PROVISION_IP}' \
                                                            -e CONTAINER_PRIVATE_KEY_PATH='${CONTAINER_PRIVATE_KEY_PATH}' \
                                                            -e PROVISION_USER='${PROVISION_USER}' \
                                                            -e PROVISION_PORT='${PROVISION_PORT}' \
                                                            -e WORKER_DISK_IDS='${WORKER_DISK_IDS}' \
                                                            -e WORKER_DISK_PREFIX='${WORKER_DISK_PREFIX}' \
                                                            -e PROVISION_TIMEOUT='${PROVISION_TIMEOUT}' \
                                                            -e log_level='INFO' \
                                                            -v '${PRIVATE_KEY_PATH}:${CONTAINER_PRIVATE_KEY_PATH}' \
                                                            -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' \
                                                            --privileged ${QUAY_BENCHMARK_RUNNER_REPOSITORY}
                                                    """
                                                }
                                            }
                                        }
                                }
                            }
                        }
                    }
                }
            }
        }
    }



    }

    post {
        always {
            script {
                sh '''
                    # Check if the image exists
                    if [[ "$(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)" != "" ]]; then

                        # Get containers using the image
                        containers=$(sudo podman ps -a --filter ancestor=${QUAY_BENCHMARK_RUNNER_REPOSITORY} -q)

                        if [[ "$containers" != "" ]]; then
                            echo "Stopping and removing containers using the image..."
                            sudo podman stop $containers
                            sudo podman rm -f $containers
                        fi

                        # Now remove the image
                        sudo podman rmi -f $(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)
                    fi
                '''
            }
        }
        failure {
            script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
                    Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
                """, subject: msg, to: "${CONTACT_EMAIL1}"
            }
        }
        success {
            echo 'Triggering 03-PerfCI-Choas-Windows-VMs-Deployment pipeline'
            build job: '03-PerfCI-Choas-Windows-VMs-Deployment', wait: false
        }
    }
}
