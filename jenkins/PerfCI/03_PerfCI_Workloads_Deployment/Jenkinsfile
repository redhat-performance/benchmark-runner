pipeline {
    agent {
        label 'PerfCi'
    }
    environment {
        CONTACT_EMAIL1 = credentials('perfci_contact_email1')
        PROVISION_USER = credentials('perfci_provision_user')
        PROVISION_IP = credentials('perfci_provision_ip')
        SCALE_NODES = credentials('perfci_scale_nodes')
        PIN_NODE_BENCHMARK_OPERATOR = credentials('perfci_pin_node_benchmark_operator')
        PIN_NODE1 = credentials('perfci_pin_node1')
        PIN_NODE2 = credentials('perfci_pin_node2')
        ELASTICSEARCH = credentials('perfci_elasticsearch')
        ELASTICSEARCH_PORT = credentials('perfci_elasticsearch_port')
        IBM_REGION_NAME = credentials('perfci_ibm_region_name')
        IBM_ENDPOINT_URL = credentials('perfci_ibm_endpoint_url')
        IBM_ACCESS_KEY_ID = credentials('perfci_ibm_access_key_id')
        IBM_SECRET_ACCESS_KEY = credentials('perfci_ibm_secret_access_key')
        IBM_BUCKET = credentials('perfci_ibm_bucket')
        IBM_KEY = credentials('perfci_ibm_key')
        RUN_ARTIFACTS_URL = credentials('perfci_run_artifacts_url')
        REDIS = credentials('perfci_redis')
        WORKER_DISK_IDS = credentials('perfci_worker_disk_ids')
        WINDOWS10_URL = credentials('perfci_windows10_url')
        WINDOWS11_URL = credentials('perfci_windows11_url')
        WINDOWS_SERVER_2019_URL = credentials('perfci_windows_server_2019_url')
        WINDOWS_SERVER_2022_URL = credentials('perfci_windows_server_2022_url')
        LSO_NODE = credentials('perfci_lso_node')
        QUAY_BENCHMARK_RUNNER_REPOSITORY = credentials('perfci_quay_repository')
        KUBEADMIN_PASSWORD = readFile('/home/jenkins/.kube/kubeadmin-password').trim()
        KUBEADMIN_PASSWORD_PATH = '/home/jenkins/.kube/kubeadmin-password'
        KUBECONFIG_PATH = '/root/.kube/config'
        PRIVATE_KEY_PATH = '/home/jenkins/.ssh/provision_private_key'
        CONFIG_PATH = '/home/jenkins/.ssh/config'
        WORKSPACE='/home/jenkins'
        CONTAINER_PRIVATE_KEY_PATH = '/root/.ssh/provision_private_key'
        WORKER_DISK_PREFIX = 'wwn-0x'
        ENABLE_PROMETHEUS_SNAPSHOT = 'True'
        SAVE_ARTIFACTS_LOCAL = 'False'
        RUN_TYPE = 'perf_ci'
        PROVISION_PORT = 22
        NUM_ODF_DISK = 6
        VDBENCH_SCALE = 2
        BOOTSTORM_SCALE = 80
        WINDOWS_SCALE = 37
        THREADS_LIMIT= 20
        PROVISION_TIMEOUT = 3600
        TIMEOUT = 8000
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Clean the Jenkins workspace
                        echo "Cleaning Jenkins workspace"
                        deleteDir()
                        sh '''
                        # Check if the image exists
                        if [[ "$(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)" != "" ]]; then

                            # Get containers using the image
                            containers=$(sudo podman ps -a --filter ancestor=${QUAY_BENCHMARK_RUNNER_REPOSITORY} -q)

                            if [[ "$containers" != "" ]]; then
                                echo "Stopping and removing containers using the image..."
                                sudo podman stop $containers
                                sudo podman rm -f $containers
                            fi

                            # Now remove the image
                            sudo podman rmi -f $(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)
                        fi
                        '''
                }
            }
        }

        stage('⚙️ SET SSH key') {
            steps {
                script {
                    sh 'mkdir -p $WORKSPACE/.ssh/'
                    sh 'sudo chmod 700 $WORKSPACE/.ssh/'
                    withCredentials([file(credentialsId: 'perfci_provision_private_key_file', variable: 'PROVISION_PRIVATE_KEY_FILE')]) {
                        sh "sudo cp ${PROVISION_PRIVATE_KEY_FILE} ${WORKSPACE}/.ssh/provision_private_key"
                        sh "sudo chown jenkins:jenkins ${WORKSPACE}/.ssh/provision_private_key"
                    }
                    sh 'sudo chmod 600 $PRIVATE_KEY_PATH'
                    sh '''
                        sudo cat > "$CONFIG_PATH" <<END
    Host provision
        HostName ${PROVISION_IP}
        User ${PROVISION_USER}
        IdentityFile $PRIVATE_KEY_PATH
        StrictHostKeyChecking no
        ServerAliveInterval 30
        ServerAliveCountMax 5
END
                    '''
                    sh 'sudo chmod 600 $CONFIG_PATH'
                }
            }
        }

        stage('WORKLOADS Deployment') {
            steps {
                script {
                    def workloads =  ['uperf_pod', 'uperf_vm', 'hammerdb_pod_mariadb', 'hammerdb_vm_mariadb','hammerdb_pod_mariadb_lso', 'hammerdb_vm_mariadb_lso', 'hammerdb_pod_postgres', 'hammerdb_vm_postgres', 'hammerdb_pod_postgres_lso', 'hammerdb_vm_postgres_lso', 'hammerdb_pod_mssql', 'hammerdb_vm_mssql', 'hammerdb_pod_mssql_lso', 'hammerdb_vm_mssql_lso', 'vdbench_pod', 'vdbench_vm', 'vdbench_pod_scale', 'vdbench_vm_scale', 'bootstorm_vm_scale', 'windows_vm_scale_windows10', 'windows_vm_scale_windows11', 'windows_vm_scale_windows_server_2019', 'windows_vm_scale_windows_server_2022' ]
                    def build_version = sh(script: 'curl -s "https://pypi.org/pypi/benchmark-runner/json" | jq -r .info.version', returnStdout: true).trim()
                    def WINDOWS_URL = ''
                    def SCALE = ''
                    def workload_name = ''
                    def retryCount = 3 // Number of retries per workload

                    for (workload in workloads) {
                        boolean success = false
                        for (int i = 0; i < retryCount && !success; i++) {
                            try {
                                // workload full name
                                workload_name = workload
                                // Parse the workload name
                                def parts = "${workload}".split("_")
                                def WORKLOAD = parts[0] + "_" + parts[1]
                                def RUN = parts.size() >= 3 ? parts[2] : ""
                                if (RUN == "scale") {
                                    if (workload == "vdbench_pod_scale" || workload == "vdbench_vm_scale") {
                                        SCALE = VDBENCH_SCALE
                                    }
                                    // bootstorm_vm_scale: no need redis for synchronization but need SCALE and THREADS_LIMIT
                                    if (workload == "bootstorm_vm_scale") {
                                        // Warm-up: Pull the Fedora image from quay.io for each node
                                        sh """ sudo podman run --rm -t -e WORKLOAD='${WORKLOAD}' -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' -e RUN_TYPE='${RUN_TYPE}' -e SCALE='1' -e SCALE_NODES='${SCALE_NODES}' -e TIMEOUT='${TIMEOUT}' -e log_level='INFO' -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' --privileged '${QUAY_BENCHMARK_RUNNER_REPOSITORY}' """
                                        SCALE = BOOTSTORM_SCALE
                                    }

                                    if (WORKLOAD == "windows_vm") {
                                        switch (workload) {
                                            case "windows_vm_scale_windows10":
                                                WINDOWS_URL = WINDOWS10_URL
                                                break
                                            case "windows_vm_scale_windows11":
                                                WINDOWS_URL = WINDOWS11_URL
                                                break
                                            case "windows_vm_scale_windows_server_2019":
                                                WINDOWS_URL = WINDOWS_SERVER_2019_URL
                                                break
                                            case "windows_vm_scale_windows_server_2022":
                                                WINDOWS_URL = WINDOWS_SERVER_2022_URL
                                                break
                                            default:
                                                error "Unknown Windows scale workload ${workload}"
                                        }

                                        sh """ sudo podman run --rm -t -e WORKLOAD='${WORKLOAD}' -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' -e RUN_TYPE='${RUN_TYPE}' -e SCALE='1' -e SCALE_NODES='${SCALE_NODES}' -e WINDOWS_URL='${WINDOWS_URL}' -e TIMEOUT='${TIMEOUT}' -e log_level='INFO' -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' --privileged '${QUAY_BENCHMARK_RUNNER_REPOSITORY}' """
                                        SCALE = WINDOWS_SCALE
                                    }
                                  workload = WORKLOAD
                                } else {
                                    SCALE = ""
                                }

                                // Create a stage for each workload
                                stage(workload_name) {
                                    sh """
                                        sudo podman run --rm -t \
                                        -e WORKLOAD='${workload}' \
                                        -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' \
                                        -e PIN_NODE_BENCHMARK_OPERATOR='${PIN_NODE_BENCHMARK_OPERATOR}' \
                                        -e PIN_NODE1='${PIN_NODE1}' \
                                        -e PIN_NODE2='${PIN_NODE2}' \
                                        -e ELASTICSEARCH='${ELASTICSEARCH}' \
                                        -e ELASTICSEARCH_PORT='${ELASTICSEARCH_PORT}' \
                                        -e IBM_REGION_NAME='${IBM_REGION_NAME}' \
                                        -e IBM_ENDPOINT_URL='${IBM_ENDPOINT_URL}' \
                                        -e IBM_ACCESS_KEY_ID='${IBM_ACCESS_KEY_ID}' \
                                        -e IBM_SECRET_ACCESS_KEY='${IBM_SECRET_ACCESS_KEY}' \
                                        -e IBM_BUCKET='${IBM_BUCKET}' \
                                        -e IBM_KEY='${IBM_KEY}' \
                                        -e RUN_ARTIFACTS_URL='${RUN_ARTIFACTS_URL}' \
                                        -e BUILD_VERSION='${build_version}' \
                                        -e RUN_TYPE='${RUN_TYPE}' \
                                        -e SAVE_ARTIFACTS_LOCAL='False' \
                                        -e ENABLE_PROMETHEUS_SNAPSHOT='True' \
                                        -e WORKER_DISK_IDS='${WORKER_DISK_IDS}' \
                                        -e WORKER_DISK_PREFIX='${WORKER_DISK_PREFIX}' \
                                        -e SCALE='${SCALE}' \
                                        -e SCALE_NODES='${SCALE_NODES}' \
                                        -e REDIS='${REDIS}' \
                                        -e THREADS_LIMIT='${THREADS_LIMIT}' \
                                        -e WINDOWS_URL='${WINDOWS_URL}'  \
                                        -e LSO_NODE='${LSO_NODE}'  \
                                        -e TIMEOUT='${TIMEOUT}' \
                                        -e log_level='INFO' \
                                        -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' \
                                        --privileged '${QUAY_BENCHMARK_RUNNER_REPOSITORY}'
                                    """
                                    success = true
                                }
                            } catch (Exception e) {
                                echo "Error occurred in workload ${workload}: ${e.message}"
                                if (i < retryCount - 1) {
                                    echo "Retrying..."
                                    sleep(time: 120, unit: 'SECONDS') // Sleep for 2 minutes between retries
                                } else {
                                    echo "Reached maximum retry attempts for workload ${workload}. Moving to the next workload..."
                                }
                            }
                        }
                        if (!success) {
                            echo "Workload ${workload} failed after ${retryCount} retries."
                        }
                    }
                }
            }
        } // WORKLOADS Deployment

    } // stages

    post {
        always {
            script {
                sh 'sudo podman ps -a --filter "name=benchmark-runner" -q | xargs -r podman rm -f'
            }
        }
        failure {
            script {
                sh """ sudo podman run --rm -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' -e ELASTICSEARCH='${ELASTICSEARCH}' -e ELASTICSEARCH_PORT='${ELASTICSEARCH_PORT}' -e CI_STATUS=''failed'' -e RUN_TYPE='${RUN_TYPE}' -e log_level='INFO' -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' --privileged '${QUAY_BENCHMARK_RUNNER_REPOSITORY}' """
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
                    Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
                """, subject: msg, to: "${CONTACT_EMAIL1}"
            }
        }
        success {
            script {
                sh """ sudo podman run --rm -e KUBEADMIN_PASSWORD='${KUBEADMIN_PASSWORD}' -e ELASTICSEARCH='${ELASTICSEARCH}' -e ELASTICSEARCH_PORT='${ELASTICSEARCH_PORT}' -e CI_STATUS='pass' -e RUN_TYPE='${RUN_TYPE}' -e log_level='INFO' -v '${KUBECONFIG_PATH}:${KUBECONFIG_PATH}' --privileged '${QUAY_BENCHMARK_RUNNER_REPOSITORY}' """
                echo '04-PerfCI-Grafana-Deployment pipeline'
                build job: '04-PerfCI-Grafana-Deployment', wait: false
            }
        }
    }
}
