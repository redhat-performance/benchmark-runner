pipeline {
    agent {
        label 'PerfCi'
    }
    environment {
        CONTACT_EMAIL = credentials('perfci_contact_email')
        ELASTICSEARCH = credentials('perfci_elasticsearch')
        ELASTICSEARCH_PORT = credentials('perfci_elasticsearch_port')
        GRAFANA_URL = credentials('perfci_grafana_url')
        GRAFANA_API_KEY = credentials('perfci_grafana_api_key')
        GRAFANA_JSON_PATH = credentials('perfci_grafana_json_path')
        GRAFANA_FOLDER_NAME = credentials('perfci_grafana_folder_name')
        MAIN_LIBSONNET_PATH = credentials('perfci_main_libsonnet_path')
        EMAIL = credentials('perfci_email')
        USER_NAME = credentials('perfci_user_name')
        GIT_TOKEN = credentials('perfci_git_token')
        GIT_REPOSITORY = credentials('perfci_git_repository')
        QUAY_BENCHMARK_RUNNER_REPOSITORY = credentials('perfci_quay_repository')
        RUN_ARTIFACTS_PATH = "/tmp/benchmark-runner-run-artifacts"
    }

    stages {
        stage('Cleanup') {
            steps {
                script {
                    try {
                        // Delete only the workspace-local artifact folder (safe)
                        sh "sudo rm -rf ${env.RUN_ARTIFACTS_PATH}"
                        // Recreate artifact folder with Jenkins user permissions
                        sh "mkdir -p ${env.RUN_ARTIFACTS_PATH}"
                        // Clean the Jenkins workspace
                        echo "Cleaning Jenkins workspace"
                        sh '[ -d ${WORKSPACE} ] && sudo rm -rf ${WORKSPACE}'
                        // deleteDir() does not delete files with root permissions, such as main.libsonnet/dashboard.json

                        // Remove benchmark-runner images if they exist
                        sh '''
                            # Check if the image exists
                            if [[ "$(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)" != "" ]]; then

                                # Get containers using the image
                                containers=$(sudo podman ps -a --filter ancestor=${QUAY_BENCHMARK_RUNNER_REPOSITORY} -q)

                                if [[ "$containers" != "" ]]; then
                                    echo "Stopping and removing containers using the image..."
                                    sudo podman stop $containers
                                    sudo podman rm -f $containers
                                fi

                                # Now remove the image
                                sudo podman rmi -f $(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)
                            fi
                        '''
                    } catch (Exception cleanupException) {
                        echo "An error occurred during cleanup: ${cleanupException.getMessage()}"
                        // Additional cleanup error handling or actions can be added here
                    }
                }
            }
        }


        stage('Checkout') {
            steps {
                script {
                    // Git checkout
                    git branch: 'main', url: 'https://github.com/redhat-performance/benchmark-runner'
                }
            }
        }

       stage('Install dependencies') {
            steps {
                script {
                    sh 'python3 -m pip install --upgrade pip'
                    sh 'if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi'
                    sh 'pip install --upgrade benchmark-runner'
                    }
            }
        }

        stage('Update latest product versions in main.libsonnet') {
            steps {
                script {
                        sh """ PYTHONPATH="${WORKSPACE}" python3 "${WORKSPACE}"/benchmark_runner/grafana/update_versions_main_libsonnet.py --elasticsearch=${ELASTICSEARCH} --elasticsearch_port='${ELASTICSEARCH_PORT}' --main_libsonnet_path='${MAIN_LIBSONNET_PATH}' """
                    }
            }
        }

        stage('Generate grafana dashboard.json using grafonnet container') {
            steps {
                script {
                        sh """ sudo podman run --rm --name run_grafonnet -v "${WORKSPACE}"/benchmark_runner/grafana/perf:/app --privileged quay.io/ebattat/run_grafonnet:latest """
                    }
            }
        }

        stage('Check for changes in main.libsonnet') {
            steps {
                script {
                    def file_path = "${WORKSPACE}/benchmark_runner/grafana/perf/jsonnet/main.libsonnet"

                    try {
                        // Check if the file exists
                        if (fileExists(file_path)) {
                            // Check if there are any changes in the file
                            CHANGES_MAIN_LIBSONNET = sh(script: "git diff --quiet $file_path", returnStatus: true) != 0
                            echo "CHANGES_MAIN_LIBSONNET=${CHANGES_MAIN_LIBSONNET}"
                        } else {
                            error "File $file_path does not exist" // Raise an error if the file doesn't exist
                        }
                    } catch (Exception e) {
                        // Handle any exceptions here
                        echo "Error: ${e.message}" // Echo the error message
                    }
                }
            }
        }

        stage('Check for changes in dashboard.json') {
            steps {
                script {
                    def file_path = "${WORKSPACE}/benchmark_runner/grafana/perf/dashboard.json"

                    try {
                        // Check if the file exists
                        if (fileExists(file_path)) {
                            // Check if there are any changes in the file
                            CHANGES_DASHBOARD = sh(script: "git diff --quiet $file_path", returnStatus: true) != 0
                            echo "CHANGES_DASHBOARD=${CHANGES_DASHBOARD}"
                        } else {
                            error "File $file_path does not exist" // Raise an error if the file doesn't exist
                        }
                    } catch (Exception e) {
                        // Handle any exceptions here
                        echo "Error: ${e.message}" // Echo the error message
                    }
                }
            }
        }

        stage('Update Grafana files and commit changes') {
            steps {
                script {
                    try {
                        dir(WORKSPACE) {
                            // Git configuration
                            sh '''
                                git checkout main
                                git config --global user.email "${EMAIL}"
                                git config --global user.name "${USER_NAME}"
                                git config pull.rebase false  # merge
                            '''

                            // Update dashboard.json
                            if (CHANGES_DASHBOARD.toBoolean()) {
                                sh '''
                                    cp -p benchmark_runner/grafana/perf/dashboard.json benchmark_runner/grafana/perf/dashboard_backup.json;
                                    PYTHONPATH="${WORKSPACE}" python3 benchmark_runner/grafana/update_grafana_dashboard.py --grafana_url="${GRAFANA_URL}" --grafana_api_key="${GRAFANA_API_KEY}" --grafana_json_path="${GRAFANA_JSON_PATH}" --grafana_folder_name="${GRAFANA_FOLDER_NAME}";
                                    cp -p benchmark_runner/grafana/perf/dashboard_backup.json benchmark_runner/grafana/perf/dashboard.json;
                                '''
                                sh 'git add benchmark_runner/grafana/perf/dashboard.json'
                            }

                            // Update main.libsonnet
                            if (CHANGES_MAIN_LIBSONNET.toBoolean()) {
                                sh '''
                                    cp -p benchmark_runner/grafana/perf/jsonnet/main.libsonnet benchmark_runner/grafana/perf/jsonnet/main.libsonnet_backup
                                '''
                                sh 'git add benchmark_runner/grafana/perf/jsonnet/main.libsonnet'
                            }

                            // Check if there are changes to commit
                            if (CHANGES_MAIN_LIBSONNET.toBoolean() || CHANGES_DASHBOARD.toBoolean()) {
                                // Commit, pull, and push
                                sh '''
                                    git commit -m "Update Grafana files"
                                    git pull https://${GIT_TOKEN}@${GIT_REPOSITORY} main
                                    git push https://${GIT_TOKEN}@${GIT_REPOSITORY} main
                                '''
                            } else {
                                echo 'No changes to commit.'
                            }
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }


    }

    post {
        always {
            script {
                sh '''
                    # Check if the image exists
                    if [[ "$(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)" != "" ]]; then

                        # Get containers using the image
                        containers=$(sudo podman ps -a --filter ancestor=${QUAY_BENCHMARK_RUNNER_REPOSITORY} -q)

                        if [[ "$containers" != "" ]]; then
                            echo "Stopping and removing containers using the image..."
                            sudo podman stop $containers
                            sudo podman rm -f $containers
                        fi

                        # Now remove the image
                        sudo podman rmi -f $(sudo podman images -q ${QUAY_BENCHMARK_RUNNER_REPOSITORY} 2> /dev/null)
                    fi
                '''
            }
        }
        failure {
            script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
                    Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
                """, subject: msg, to: "${CONTACT_EMAIL}"
            }
        }
        success {
            echo '05-Triggering PerfCI-Backup-Report-Deployment pipeline'
            build job: '05-PerfCI-Backup-Report-Deployment', wait: false
        }
    }
}
