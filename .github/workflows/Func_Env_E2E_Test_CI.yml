# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# This is Test PR CI Pipeline against Functional environment when pushing a PR
 
name: Func Env E2E Test CI

on:
  workflow_run:
    workflows: ["Test1"]
    types:
      - completed

#on:
#  push:
#    branches: [ main ]

jobs:
  start:
    name: Deploy start
    outputs:
      start_job_status: ${{ steps.nightly_job_step.outputs.status }}
    runs-on: ubuntu-latest
    strategy:
       max-parallel: 1
       matrix: 
          workload: [ 'stressng_pod', 'stressng_kata', 'stressng_vm', 'uperf_pod', 'uperf_kata', 'uperf_vm', 'hammerdb_pod_mariadb', 'hammerdb_kata_mariadb', 'hammerdb_vm_mariadb', 'hammerdb_pod_postgres', 'hammerdb_kata_postgres', 'hammerdb_vm_postgres', 'hammerdb_pod_mssql', 'hammerdb_kata_mssql', 'hammerdb_vm_mssql', 'vdbench_pod', 'vdbench_kata', 'vdbench_vm']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: ⚙ Run workload
      run: |
          echo ${{ matrix.workload }}
    - name: next step
      if: always()
      run: |
          echo "test"
    - name: job status
      env:
        FUNC_PROVISION_PRIVATE_KEY: ${{ secrets.FUNC_PROVISION_PRIVATE_KEY }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
      if: ${{ failure() }}
      run: |
          echo "test"
    - id: nightly_job_step
      if: always()
      run: echo "::set-output name=status::${{ job.status }}"

  nightly:
    if: always()
    needs: [start]
    name: Deploy Func Nightly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Check Job Status status and fail if they are red
      run: |
          echo ${{ needs.start.outputs.job-status }}
    - name: ⚙ Set START CI TIME
      #continue-on-error: true
      run: exit 1
    - name: next step
      if: always()
      run: |
          if [[ "${{needs.start.outputs.start_job_status}}" == "success" && "${{job.status}}" == "success" ]]; then status="success"; else status="failure"; fi
          echo $status
    - name: ⚙️ SET SSH key
      env:
        FUNC_PROVISION_PRIVATE_KEY: ${{ secrets.FUNC_PROVISION_PRIVATE_KEY }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        FUNC_PROVISION_IP: ${{ secrets.FUNC_PROVISION_IP }}
        FUNC_PROVISION_USER: ${{ secrets.FUNC_PROVISION_USER }}
      run: |
        umask 77
        mkdir -p "$RUNNER_PATH/.ssh/"
        echo "$FUNC_PROVISION_PRIVATE_KEY" > $RUNNER_PATH/private_key.txt
        sudo chmod 600 $RUNNER_PATH/private_key.txt
        echo "FUNC_PROVISION_PRIVATE_KEY_PATH=$RUNNER_PATH/private_key.txt" >> "$GITHUB_ENV"
        cat >> "$RUNNER_PATH/.ssh/config" <<END
        Host provision
          HostName $FUNC_PROVISION_IP
          User $FUNC_PROVISION_USER
          IdentityFile $RUNNER_PATH/private_key.txt
          StrictHostKeyChecking no
          ServerAliveInterval 30
          ServerAliveCountMax 5
        END
    - name: Install latest benchmark-runner
      run: |
        #python -m pip install --upgrade pip
        #pip install benchmark-runner
    - name: ⚙ Set Kubeconfig
      env:
        KUBECONFIG: ${{ secrets.FUNC_KUBECONFIG }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
      run: |
          mkdir -p "$RUNNER_PATH/.kube/"
          echo "$KUBECONFIG" > "$RUNNER_PATH/.kube/config"
          echo "KUBECONFIG_PATH=$RUNNER_PATH/.kube/config" >> "$GITHUB_ENV"
    - name: ✔️ E2E tests using latest quay.io
      env:
        KUBEADMIN_PASSWORD: ${{ secrets.FUNC_KUBEADMIN_PASSWORD }}
        PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.FUNC_PIN_NODE_BENCHMARK_OPERATOR }}
        PIN_NODE1: ${{ secrets.FUNC_PIN_NODE1 }}
        PIN_NODE2: ${{ secrets.FUNC_PIN_NODE2 }}
        ELASTICSEARCH: ${{ secrets.FUNC_ELASTICSEARCH }}
        ELASTICSEARCH_PORT: ${{ secrets.FUNC_ELASTICSEARCH_PORT }}
        ELASTICSEARCH_USER: ${{ secrets.FUNC_ELASTICSEARCH_USER }}
        ELASTICSEARCH_PASSWORD: ${{ secrets.FUNC_ELASTICSEARCH_PASSWORD }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        CONTAINER_KUBECONFIG_PATH: ${{ secrets.CONTAINER_KUBECONFIG_PATH }}
        IBM_REGION_NAME: ${{ secrets.IBM_REGION_NAME }}
        IBM_ENDPOINT_URL: ${{ secrets.IBM_ENDPOINT_URL }}
        IBM_ACCESS_KEY_ID: ${{ secrets.IBM_ACCESS_KEY_ID }}
        IBM_SECRET_ACCESS_KEY: ${{ secrets.IBM_SECRET_ACCESS_KEY }}
        IBM_BUCKET: ${{ secrets.IBM_BUCKET }}
        IBM_KEY: ${{ secrets.IBM_KEY }}
        FUNC_RUN_ARTIFACTS_URL: ${{ secrets.FUNC_RUN_ARTIFACTS_URL }}
      run: |
        # Functional CI MUST update hosts ci file
        sudo echo "${{ secrets.FUNC_HOSTS_API }}" | sudo tee -a /etc/hosts
        sudo echo "${{ secrets.FUNC_HOSTS_OAUTH }}" | sudo tee -a /etc/hosts
        # get repository last id
        declare -a repositories=('benchmark-operator' 'benchmark-wrapper')
        for repository in "${repositories[@]}"
        do
            git clone "https://github.com/cloud-bulldozer/$repository" "$RUNNER_PATH/$repository"
            pushd "$RUNNER_PATH/$repository"
            if [[ $repository == 'benchmark-operator' ]]
            then
                echo "BENCHMARK_OPERATOR_ID=$(git rev-parse @)" >> "$GITHUB_ENV"
                BENCHMARK_OPERATOR_ID=$(git rev-parse @)
            else
                echo "BENCHMARK_WRAPPER_ID=$(git rev-parse @)" >> "$GITHUB_ENV"
                BENCHMARK_WRAPPER_ID=$(git rev-parse @)
            fi
            popd
        done
        build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
        build_version="$(cut -d'=' -f2 <<<"$build")"
        #ssh -t provision "podman pull quay.io/ebattat/benchmark-runner:v1.0.289"
        ssh -t provision "podman images"
        #echo "sudo podman rmi -f \$(sudo podman images -q quay.io/ebattat/benchmark-runner 2> /dev/null)" > "$RUNNER_PATH/remove_image.sh"
        
        echo "if [[ \"\$(sudo podman images -q quay.io/ebattat/benchmark-runner 2> /dev/null)\" != \"\" ]]; then sudo podman rmi -f \$(sudo podman images -q quay.io/ebattat/benchmark-runner 2> /dev/null); fi" > "$RUNNER_PATH/remove_image.sh"
        scp -r "$RUNNER_PATH/remove_image.sh" provision:"/tmp/remove_image.sh"
        ssh -t provision "chmod +x /tmp/remove_image.sh;/tmp/./remove_image.sh;rm -f /tmp/remove_image.sh"
        
        ssh -t provision "podman images"
      
