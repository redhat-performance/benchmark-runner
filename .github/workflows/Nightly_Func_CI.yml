# Nightly CI https://github.com/marketplace/actions/deploy-nightly

name: Deploy Func Nightly CI
on:
  schedule:
    - cron: '0 4 * * *' # run at 4 AM UTC/ 0 AM EST

jobs:
  nightly:
    name: Deploy Func Nightly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Turnstyle
      uses: softprops/turnstyle@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install latest benchmark-runner
      run: |
        python -m pip install --upgrade pip
        pip install benchmark-runner
    - uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG_CI }}
      id: setcontext
    - name: ‚åõ Upload üêã to quay.io - latest benchmark-operator
      run: |
        build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
        build_version=$(cut -d'=' -f2 <<<"$build")
        sudo podman build --build-arg VERSION=$build_version --layers=false -t ${{ secrets.PACKAGE_NAME }}:v$build_version .
        sudo podman login quay.io -u ${{ secrets.QAUYIO_ROBOT_USER }} -p ${{ secrets.QAUYIO_ROBOT_TOKEN }}
        sudo podman push localhost/${{ secrets.PACKAGE_NAME }}:v$build_version quay.io/${{ secrets.QAUYIO_REPOSITORY }}/${{ secrets.PACKAGE_NAME }}
        echo '‚åõ Wait 30 sec till image will be updated in quay.io'
        sleep 30
    - name: ‚úîÔ∏è E2E tests using latest quay.io
      env:
        KUBEADMIN_PASSWORD: ${{ secrets.KUBEADMIN_PASSWORD_CI }}
        PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.PIN_NODE_BENCHMARK_OPERATOR_CI }}
        PIN_NODE1: ${{ secrets.PIN_NODE1_CI }}
        PIN_NODE2: ${{ secrets.PIN_NODE2_CI }}
        ELASTICSEARCH: ${{ secrets.ELASTICSEARCH_CI }}
        ELASTICSEARCH_PORT: ${{ secrets.ELASTICSEARCH_PORT_CI }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
      run: |
        #Functional CI must update hosts ci file
        sudo echo "${{ secrets.HOSTS1_CI }}" | sudo tee -a /etc/hosts
        sudo echo "${{ secrets.HOSTS2_CI }}" | sudo tee -a /etc/hosts
        # get repository last id
        declare -a repositories=('benchmark-operator' 'benchmark-wrapper')
        for repository in "${repositories[@]}"
        do
            git clone https://github.com/cloud-bulldozer/$repository $RUNNER_PATH/$repository
            cd $RUNNER_PATH/$repository
            if [[ $repository == 'benchmark-operator' ]]
            then
                benchmark_operator_id=$(git rev-parse @)
            else
                benchmark_wrapper_id=$(git rev-parse @)
            fi
            cd -
        done
        build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
        build_version=$(cut -d'=' -f2 <<<"$build")
        start=$(printf '%(%s)T' -1)
        declare -a workloads=('stressng_pod' 'stressng_vm' 'uperf_pod' 'uperf_vm' 'hammerdb_pod_mariadb' 'hammerdb_vm_mariadb' 'hammerdb_pod_postgres' 'hammerdb_vm_postgres' 'hammerdb_pod_mssql' 'hammerdb_vm_mssql')
        for workload in "${workloads[@]}"
        do
            echo '>>>>>>>>>>>>>>>>>>>>>>>>>> Start E2E workload:' $workload '>>>>>>>>>>>>>>>>>>>>>>>>>>'
            podman run --rm -e WORKLOAD="$workload" -e KUBEADMIN_PASSWORD="$KUBEADMIN_PASSWORD" -e PIN_NODE_BENCHMARK_OPERATOR="$PIN_NODE_BENCHMARK_OPERATOR" -e PIN_NODE1="$PIN_NODE1" -e PIN_NODE2="$PIN_NODE2" -e ELASTICSEARCH="$ELASTICSEARCH" -e ELASTICSEARCH_PORT="$ELASTICSEARCH_PORT" -e BUILD_VERSION="$build_version" -e RUN_TYPE=func_ci -e log_level=INFO -v $KUBECONFIG:"/root/.kube/config" --privileged "quay.io/ebattat/benchmark-runner:latest"
            echo '>>>>>>>>>>>>>>>>>>>>>>>>>> End E2E workload:' $workload '>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        done
        end=$(printf '%(%s)T' -1)
        ci_minutes_time=$(($((end-start))/60))
        echo '>>>>>>>>>>>>>>>>>>>>>>>>>> Update CI status pass >>>>>>>>>>>>>>>>>>>>>>>>>>'
        podman run --rm -e WORKLOAD="$workload" -e KUBEADMIN_PASSWORD="$KUBEADMIN_PASSWORD" -e PIN_NODE_BENCHMARK_OPERATOR="$PIN_NODE_BENCHMARK_OPERATOR" -e PIN_NODE1=$PIN_NODE1 -e PIN_NODE2="$PIN_NODE2" -e ELASTICSEARCH="$ELASTICSEARCH" -e ELASTICSEARCH_PORT="$ELASTICSEARCH_PORT" -e BUILD_VERSION="$build_version" -e CI_STATUS=pass -e CI_MINUTES_TIME="$ci_minutes_time" -e BENCHMARK_OPERATOR_ID="$benchmark_operator_id" -e BENCHMARK_WRAPPER_ID="$benchmark_wrapper_id" -e log_level=INFO -v $KUBECONFIG:"/root/.kube/config" --privileged "quay.io/ebattat/benchmark-runner:v$build_version"
    - name: Update CI status failed
      env:
        KUBEADMIN_PASSWORD: ${{ secrets.KUBEADMIN_PASSWORD_CI }}
        PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.PIN_NODE_BENCHMARK_OPERATOR_CI }}
        PIN_NODE1: ${{ secrets.PIN_NODE1_CI }}
        PIN_NODE2: ${{ secrets.PIN_NODE2_CI }}
        ELASTICSEARCH: ${{ secrets.ELASTICSEARCH_CI }}
        ELASTICSEARCH_PORT: ${{ secrets.ELASTICSEARCH_PORT_CI }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
      if: ${{ failure() }}
      run: |
        build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
        build_version="$(cut -d'=' -f2 <<<"$build")"
        ci_minutes_time=$(($((end-start))/60))
        echo '>>>>>>>>>>>>>>>>>>>>>>>>>> Update CI status failed >>>>>>>>>>>>>>>>>>>>>>>>>>'
        podman run --rm -e WORKLOAD="$workload" -e KUBEADMIN_PASSWORD="$KUBEADMIN_PASSWORD" -e PIN_NODE_BENCHMARK_OPERATOR="$PIN_NODE_BENCHMARK_OPERATOR" -e PIN_NODE1="$PIN_NODE1" -e PIN_NODE2="$PIN_NODE2" -e ELASTICSEARCH="$ELASTICSEARCH" -e ELASTICSEARCH_PORT="$ELASTICSEARCH_PORT" -e BUILD_VERSION="$build_version" -e CI_STATUS=failed -e log_level=INFO -v $KUBECONFIG:"/root/.kube/config" --privileged "quay.io/ebattat/benchmark-runner:v$build_version"
