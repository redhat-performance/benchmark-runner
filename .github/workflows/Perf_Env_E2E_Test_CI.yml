# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# This is Test PR CI Pipeline against Functional environment when pushing a PR
 
name: Perf Env E2E Test CI

#on:
#  workflow_run:
#    workflows: ["Test1"]
#    types:
#      - completed

on:
  push:
    branches: [ main ]

# Ensures that only one deploy task per branch/environment will run at a time. 
concurrency:
  group: performance-environment
  cancel-in-progress: false
  
jobs:
  vdbench_workload:
    name: Vdbench workload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: ⚙ Set START CI TIME
        run: echo "START_CI=${{ needs.nightly_start.outputs.start_time_output }}" >> "$GITHUB_ENV"
      - name: Install latest benchmark-runner
        run: |
          python -m pip install --upgrade pip
          pip install benchmark-runner
      - name: ⚙️ Set SSH key
        env:
          PERF_PROVISION_PRIVATE_KEY: ${{ secrets.PERF_PROVISION_PRIVATE_KEY }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
          PERF_PROVISION_IP: ${{ secrets.PERF_PROVISION_IP }}
          PERF_PROVISION_USER: ${{ secrets.PERF_PROVISION_USER }}
        run: |
          mkdir -p "$RUNNER_PATH/.ssh/"
          echo "$PERF_PROVISION_PRIVATE_KEY" > $RUNNER_PATH/private_key.txt
          sudo chmod 600 $RUNNER_PATH/private_key.txt
          echo "PERF_PROVISION_PRIVATE_KEY_PATH=$RUNNER_PATH/private_key.txt" >> "$GITHUB_ENV"
          cat >> "$RUNNER_PATH/.ssh/config" <<END
          Host provision
            HostName $PERF_PROVISION_IP
            User $PERF_PROVISION_USER
            IdentityFile $RUNNER_PATH/private_key.txt
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ServerAliveCountMax 5
          END
      - name: ⚙ Set Kubeconfig
        env:
          KUBECONFIG: ${{ secrets.PERF_KUBECONFIG }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        run: |
          mkdir -p "$RUNNER_PATH/.kube/"
          echo "$KUBECONFIG" > "$RUNNER_PATH/.kube/config"
          echo "KUBECONFIG_PATH=$RUNNER_PATH/.kube/config" >> "$GITHUB_ENV"
      - name: ✔️ E2E tests using latest quay.io
        env:
          KUBEADMIN_PASSWORD: ${{ secrets.PERF_KUBEADMIN_PASSWORD }}
          PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.PERF_PIN_NODE_BENCHMARK_OPERATOR }}
          PIN_NODE1: ${{ secrets.PERF_PIN_NODE1 }}
          PIN_NODE2: ${{ secrets.PERF_PIN_NODE2 }}
          ELASTICSEARCH: ${{ secrets.PERF_ELASTICSEARCH }}
          ELASTICSEARCH_PORT: ${{ secrets.PERF_ELASTICSEARCH_PORT }}
          ELASTICSEARCH_USER: ${{ secrets.PERF_ELASTICSEARCH_USER }}
          ELASTICSEARCH_PASSWORD: ${{ secrets.PERF_ELASTICSEARCH_PASSWORD }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
          CONTAINER_KUBECONFIG_PATH: ${{ secrets.CONTAINER_KUBECONFIG_PATH }}
          IBM_REGION_NAME: ${{ secrets.IBM_REGION_NAME }}
          IBM_ENDPOINT_URL: ${{ secrets.IBM_ENDPOINT_URL }}
          IBM_ACCESS_KEY_ID: ${{ secrets.IBM_ACCESS_KEY_ID }}
          IBM_SECRET_ACCESS_KEY: ${{ secrets.IBM_SECRET_ACCESS_KEY }}
          IBM_BUCKET: ${{ secrets.IBM_BUCKET }}
          IBM_KEY: ${{ secrets.IBM_KEY }}
          PERF_RUN_ARTIFACTS_URL: ${{ secrets.PERF_RUN_ARTIFACTS_URL }}
        run: |
          # get repository last id
          declare -a repositories=('benchmark-operator' 'benchmark-wrapper')
          for repository in "${repositories[@]}"
          do
              git clone "https://github.com/cloud-bulldozer/$repository" "$RUNNER_PATH/$repository"
              pushd "$RUNNER_PATH/$repository"
              if [[ $repository == 'benchmark-operator' ]]
              then
                  echo "BENCHMARK_OPERATOR_ID=$(git rev-parse @)" >> "$GITHUB_ENV"
                  BENCHMARK_OPERATOR_ID=$(git rev-parse @)
              else
                  echo "BENCHMARK_WRAPPER_ID=$(git rev-parse @)" >> "$GITHUB_ENV"
                  BENCHMARK_WRAPPER_ID=$(git rev-parse @)
              fi
              popd
          done
          build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
          build_version="$(cut -d'=' -f2 <<<"$build")"
          declare -a workloads=('vdbench_pod' 'vdbench_kata' 'vdbench_vm')
          for workload in "${workloads[@]}"
          do
              echo '>>>>>>>>>>>>>>>>>>>>>>>>>> Start E2E workload:' $workload '>>>>>>>>>>>>>>>>>>>>>>>>>>'
              ssh -t provision "podman run --rm -t -e OCP_ENV_FLAVOR='PERF' -e WORKLOAD='$workload' -e KUBEADMIN_PASSWORD='$KUBEADMIN_PASSWORD' -e PIN_NODE_BENCHMARK_OPERATOR='$PIN_NODE_BENCHMARK_OPERATOR' -e PIN_NODE1='$PIN_NODE1' -e PIN_NODE2='$PIN_NODE2' -e ELASTICSEARCH='$ELASTICSEARCH' -e ELASTICSEARCH_PORT='$ELASTICSEARCH_PORT' -e ELASTICSEARCH_USER='$ELASTICSEARCH_USER' -e ELASTICSEARCH_PASSWORD='$ELASTICSEARCH_PASSWORD' -e IBM_REGION_NAME='$IBM_REGION_NAME' -e IBM_ENDPOINT_URL='$IBM_ENDPOINT_URL' -e IBM_ACCESS_KEY_ID='$IBM_ACCESS_KEY_ID' -e IBM_SECRET_ACCESS_KEY='$IBM_SECRET_ACCESS_KEY' -e IBM_BUCKET='$IBM_BUCKET' -e IBM_KEY='$IBM_KEY' -e PERF_RUN_ARTIFACTS_URL='$PERF_RUN_ARTIFACTS_URL' -e BUILD_VERSION='$build_version' -e RUN_TYPE='perf_ci' -e PERF_TIMEOUT='10800' -e log_level='INFO' -v '$CONTAINER_KUBECONFIG_PATH':'$CONTAINER_KUBECONFIG_PATH' --privileged 'quay.io/ebattat/benchmark-runner:v$build_version'"
              echo '>>>>>>>>>>>>>>>>>>>>>>>>>> End E2E workload:' $workload '>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
          done
      - name: ❎ CI status failed
        env:
          KUBEADMIN_PASSWORD: ${{ secrets.PERF_KUBEADMIN_PASSWORD }}
          PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.PERF_PIN_NODE_BENCHMARK_OPERATOR }}
          PIN_NODE1: ${{ secrets.PERF_PIN_NODE1 }}
          PIN_NODE2: ${{ secrets.PERF_PIN_NODE2 }}
          ELASTICSEARCH: ${{ secrets.PERF_ELASTICSEARCH }}
          ELASTICSEARCH_PORT: ${{ secrets.PERF_ELASTICSEARCH_PORT }}
          ELASTICSEARCH_USER: ${{ secrets.PERF_ELASTICSEARCH_USER }}
          ELASTICSEARCH_PASSWORD: ${{ secrets.PERF_ELASTICSEARCH_PASSWORD }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
          CONTAINER_KUBECONFIG_PATH: ${{ secrets.CONTAINER_KUBECONFIG_PATH }}
        if: ${{ failure() }}
        run: |
          build=$(pip freeze | grep benchmark-runner | sed 's/==/=/g')
          build_version="$(cut -d'=' -f2 <<<"$build")"
          end=$(printf '%(%s)T' -1)
          ci_minutes_time=$(( (end - START_CI) / 60))
          echo '>>>>>>>>>>>>>>>>>>>>>>>>>> Update CI status failed >>>>>>>>>>>>>>>>>>>>>>>>>>'
          podman run --rm -e OCP_ENV_FLAVOR="PERF" -e KUBEADMIN_PASSWORD="$KUBEADMIN_PASSWORD" -e PIN_NODE_BENCHMARK_OPERATOR="$PIN_NODE_BENCHMARK_OPERATOR" -e PIN_NODE1="$PIN_NODE1" -e PIN_NODE2="$PIN_NODE2" -e ELASTICSEARCH="$ELASTICSEARCH" -e ELASTICSEARCH_PORT="$ELASTICSEARCH_PORT" -e ELASTICSEARCH_USER="$ELASTICSEARCH_USER" -e ELASTICSEARCH_PASSWORD="$ELASTICSEARCH_PASSWORD" -e BUILD_VERSION="$build_version" -e CI_STATUS="failed" -e CI_MINUTES_TIME="$ci_minutes_time" -e BENCHMARK_OPERATOR_ID="$BENCHMARK_OPERATOR_ID" -e BENCHMARK_WRAPPER_ID="$BENCHMARK_WRAPPER_ID" -e RUN_TYPE="perf_ci" -e OCP_INSTALL_MINUTES_TIME="${{needs.ocp_ipi_installation.outputs.output1}}" -e PERF_TIMEOUT="3600" -e log_level="INFO" -v "$KUBECONFIG_PATH":"$CONTAINER_KUBECONFIG_PATH" --privileged "quay.io/ebattat/benchmark-runner:v$build_version"
