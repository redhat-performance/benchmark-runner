# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# This is Test PR CI Pipeline against Functional environment when pushing a PR

name: Func Env PR Test CI

on:
  pull_request_target:
    branches: [ main ]
  workflow_dispatch:

# Ensures that only one deploy task per branch/environment will run at a time. 
concurrency:
  group: functional-environment
  cancel-in-progress: false
  
jobs:
  unittest:
    # run all python versions, in other jobs run the latest python
    name: unittest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
          if [[ -f tests_requirements.txt ]]; then pip install -r tests_requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: ⚙️ Set Kubeconfig and hosts
        env:
          KUBECONFIG_CONTENTS: ${{ secrets.FUNC_KUBECONFIG }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
          OCP_HOSTS: ${{ secrets.FUNC_OCP_HOSTS }}
        run: |
          mkdir -p "$RUNNER_PATH/.kube/"
          echo "$KUBECONFIG_CONTENTS" > "$RUNNER_PATH/.kube/config"
          echo "KUBECONFIG_PATH=$RUNNER_PATH/.kube/config" >> "$GITHUB_ENV"
          sudo tee -a /etc/hosts <<< "$OCP_HOSTS" > /dev/null
      - name: 📃 Unittest with pytest
        env:
          KUBEADMIN_PASSWORD: ${{ secrets.FUNC_KUBEADMIN_PASSWORD }}
          PIN_NODE1: ${{ secrets.FUNC_PIN_NODE1 }}
          PIN_NODE2: ${{ secrets.FUNC_PIN_NODE2 }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
          ELASTICSEARCH: ${{ secrets.FUNC_ELASTICSEARCH }}
          ELASTICSEARCH_PORT: ${{ secrets.FUNC_ELASTICSEARCH_PORT }}
          ELASTICSEARCH_USER: ${{ secrets.FUNC_ELASTICSEARCH_USER }}
          ELASTICSEARCH_PASSWORD: ${{ secrets.FUNC_ELASTICSEARCH_PASSWORD }}
          IBM_REGION_NAME: ${{ secrets.IBM_REGION_NAME }}
          IBM_ENDPOINT_URL: ${{ secrets.IBM_ENDPOINT_URL }}
          IBM_ACCESS_KEY_ID: ${{ secrets.IBM_ACCESS_KEY_ID }}
          IBM_SECRET_ACCESS_KEY: ${{ secrets.IBM_SECRET_ACCESS_KEY }}
          IBM_BUCKET: ${{ secrets.IBM_BUCKET }}
          IBM_KEY: ${{ secrets.IBM_KEY }}
          RUN_ARTIFACTS_URL: ${{ secrets.FUNC_RUN_ARTIFACTS_URL }}
        run: |
          # Install Dockerfile content for pytest
          # install oc/kubectl
          oc_version=4.11.0-0.okd-2022-10-15-073651
          curl -L https://github.com/openshift/okd/releases/download/${oc_version}/openshift-client-linux-${oc_version}.tar.gz -o $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
          tar -xzvf $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz -C $RUNNER_PATH/
          rm $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
          cp $RUNNER_PATH/kubectl /usr/local/bin/kubectl
          cp $RUNNER_PATH/oc /usr/local/bin/oc
          
          # clone benchmark-operator v1.0.1
          git clone -b v1.0.1 https://github.com/cloud-bulldozer/benchmark-operator $RUNNER_PATH/benchmark-operator
          
          # run pytest - only unittest
          pytest -v tests/unittest/

  integration_test:
    name: integration_test
    needs: [unittest]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
        if [[ -f tests_requirements.txt ]]; then pip install -r tests_requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: ⚙️ Set Kubeconfig and hosts
      env:
        KUBECONFIG_CONTENTS: ${{ secrets.FUNC_KUBECONFIG }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        OCP_HOSTS: ${{ secrets.FUNC_OCP_HOSTS }}
      run: |
          mkdir -p "$RUNNER_PATH/.kube/"
          echo "$KUBECONFIG_CONTENTS" > "$RUNNER_PATH/.kube/config"
          echo "KUBECONFIG_PATH=$RUNNER_PATH/.kube/config" >> "$GITHUB_ENV"
          sudo tee -a /etc/hosts <<< "$OCP_HOSTS" > /dev/null
    - name: 📃 Integration test with pytest
      env:
        KUBEADMIN_PASSWORD: ${{ secrets.FUNC_KUBEADMIN_PASSWORD }}
        PIN_NODE1: ${{ secrets.FUNC_PIN_NODE1 }}
        PIN_NODE2: ${{ secrets.FUNC_PIN_NODE2 }}
        RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        ELASTICSEARCH: ${{ secrets.FUNC_ELASTICSEARCH }}
        ELASTICSEARCH_PORT: ${{ secrets.FUNC_ELASTICSEARCH_PORT }}
        ELASTICSEARCH_USER: ${{ secrets.FUNC_ELASTICSEARCH_USER }}
        ELASTICSEARCH_PASSWORD: ${{ secrets.FUNC_ELASTICSEARCH_PASSWORD }}
        IBM_REGION_NAME: ${{ secrets.IBM_REGION_NAME }}
        IBM_ENDPOINT_URL: ${{ secrets.IBM_ENDPOINT_URL }}
        IBM_ACCESS_KEY_ID: ${{ secrets.IBM_ACCESS_KEY_ID }}
        IBM_SECRET_ACCESS_KEY: ${{ secrets.IBM_SECRET_ACCESS_KEY }}
        IBM_BUCKET: ${{ secrets.IBM_BUCKET }}
        IBM_KEY: ${{ secrets.IBM_KEY }}
        RUN_ARTIFACTS_URL: ${{ secrets.FUNC_RUN_ARTIFACTS_URL }}
      run: |
        # Install Dockerfile content for pytest
        # install oc/kubectl
        oc_version=4.11.0-0.okd-2022-10-15-073651
        curl -L https://github.com/openshift/okd/releases/download/${oc_version}/openshift-client-linux-${oc_version}.tar.gz -o $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
        tar -xzvf $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz -C $RUNNER_PATH/
        rm $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
        cp $RUNNER_PATH/kubectl /usr/local/bin/kubectl
        cp $RUNNER_PATH/oc /usr/local/bin/oc

        # clone benchmark-operator v1.0.1
        git clone -b v1.0.1 https://github.com/cloud-bulldozer/benchmark-operator $RUNNER_PATH/benchmark-operator

        # run pytest
        pytest

  e2e:
   name: e2e
   needs: [unittest, integration_test]
   runs-on: ubuntu-latest
   steps:
   - uses: actions/checkout@v3
     with:
       ref: ${{ github.event.pull_request.head.sha }}
   - name: Set up Python 3.10
     uses: actions/setup-python@v4
     with:
       python-version: '3.10'
   - name: Install dependencies
     run: |
       python -m pip install --upgrade pip
       pip install flake8 pytest pytest-cov
       if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
       if [[ -f tests_requirements.txt ]]; then pip install -r tests_requirements.txt; fi
   - name: ⚙️ Set Kubeconfig and hosts
     env:
       KUBECONFIG_CONTENTS: ${{ secrets.FUNC_KUBECONFIG }}
       RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
       OCP_HOSTS: ${{ secrets.FUNC_OCP_HOSTS }}
     run: |
         mkdir -p "$RUNNER_PATH/.kube/"
         echo "$KUBECONFIG_CONTENTS" > "$RUNNER_PATH/.kube/config"
         echo "KUBECONFIG_PATH=$RUNNER_PATH/.kube/config" >> "$GITHUB_ENV"
         sudo tee -a /etc/hosts <<< "$OCP_HOSTS" > /dev/null
   - name: 📃 E2E test
     env:
       WORKLOAD: "stressng_pod"
       KUBEADMIN_PASSWORD: ${{ secrets.FUNC_KUBEADMIN_PASSWORD }}
       PIN_NODE_BENCHMARK_OPERATOR: ${{ secrets.FUNC_PIN_NODE_BENCHMARK_OPERATOR }}
       PIN_NODE1: ${{ secrets.FUNC_PIN_NODE1 }}
       PIN_NODE2: ${{ secrets.FUNC_PIN_NODE2 }}
       RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
       ELASTICSEARCH: ${{ secrets.FUNC_ELASTICSEARCH }}
       ELASTICSEARCH_PORT: ${{ secrets.FUNC_ELASTICSEARCH_PORT }}
       ELASTICSEARCH_USER: ${{ secrets.FUNC_ELASTICSEARCH_USER }}
       ELASTICSEARCH_PASSWORD: ${{ secrets.FUNC_ELASTICSEARCH_PASSWORD }}
     run: |
       # Install Dockerfile content for pytest
       # install oc/kubectl
       oc_version=4.11.0-0.okd-2022-10-15-073651
       curl -L https://github.com/openshift/okd/releases/download/${oc_version}/openshift-client-linux-${oc_version}.tar.gz -o $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
       tar -xzvf $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz -C $RUNNER_PATH/
       rm $RUNNER_PATH/openshift-client-linux-${oc_version}.tar.gz
       cp $RUNNER_PATH/kubectl /usr/local/bin/kubectl
       cp $RUNNER_PATH/oc /usr/local/bin/oc

       # clone benchmark-operator v1.0.1
       git clone -b v1.0.1 https://github.com/cloud-bulldozer/benchmark-operator $RUNNER_PATH/benchmark-operator
       
       # run main
       PYTHONPATH=. python benchmark_runner/main/main.py
