apiVersion: v1
kind: Namespace
metadata:
  name: postgres-db
---
{%- if kind == 'kata' %}
#This is a tweak of the restricted scc, to allow fsGroup to be specified in a deployment
# workaround for kata virtiofsd permission error in ODF 4.10.5
apiVersion: security.openshift.io/v1
metadata:
  name: postgresdbscc
kind: SecurityContextConstraints
fsGroup:
  type: RunAsAny
runAsUser:
  type: MustRunAsRange
seLinuxContext:
  type: MustRunAs
users:
- system:serviceaccount:postgres-db:default
---
{%- endif %}
{%- if storage_type == 'lso' %}
apiVersion: local.storage.openshift.io/v1
kind: LocalVolume
metadata:
  name: local-disks
  namespace: openshift-local-storage
spec:
  nodeSelector:
    nodeSelectorTerms:
    - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - {{ pin_node2 }}
  storageClassDevices:
    - storageClassName: local-sc
      volumeMode: Filesystem
      fsType: ext4
      devicePaths:
        - {{ lso_path }}
---
{%- endif %}
{%- if storage_type == 'lso' or  odf_pvc == True %}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
    name: postgres-persistent-storage
    namespace: postgres-db
spec:
    {%- if storage_type == 'lso' %}
    storageClassName: local-sc
    {%- else %}
    storageClassName: ocs-storagecluster-ceph-rbd
    {%- endif %}
    accessModes: [ "ReadWriteOnce" ]
    volumeMode: Filesystem
    resources:
      requests:
        storage: {{ storage }}
---
{%- endif %}
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-custom-config
  namespace: postgres-db
data:
  custom.pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    # IPv4 local connections:
    host    all             all             all            trust
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: postgres-db
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
        type: postgres-database-server
      {%- if kind == 'kata' and kata_cpuoffline_workaround == True %}
      annotations:
        io.katacontainers.config.hypervisor.default_vcpus: "{{ database_limits_cpu }}"
      {%- endif %}
    spec:
      nodeSelector:
        kubernetes.io/hostname: "{{ pin_node2 }}"
      {%- if kind == 'kata' %}
      runtimeClassName: kata
      # workaround for kata virtiofsd permission error in ODF 4.10.5
      securityContext:
        fsGroup: 0
      {%- endif %}
      terminationGracePeriodSeconds: 10
      containers:
        - name: postgres
          image: docker.io/centos/postgresql-10-centos8:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          resources:
            requests:
              cpu: {{ database_requests_cpu }}
              memory: {{ database_requests_memory }}
            limits:
            {%- if kind != 'kata' or kata_cpuoffline_workaround != True %}
              cpu: {{ database_limits_cpu }}
              {%- endif %}
              memory: {{ database_limits_memory }}
          env:
            - name: POSTGRESQL_USER
              value: "test"
            - name: POSTGRESQL_PASSWORD
              value: "test"
            - name: POSTGRESQL_DATABASE
              value: "test"
            - name: POSTGRESQL_ADMIN_PASSWORD
              value: "postgres"
          volumeMounts:
            - name: postgres-custom-config
              mountPath: /var/lib/pgsql/data/pg_hba.conf
              subPath: custom.pg_hba.conf #should be the name used in the ConfigMap
          {%- if storage_type == 'lso' or odf_pvc == True %}
            - name: postgres-persistent-storage
              mountPath: /var/lib/pgsql/data
              readOnly: false
          {%- endif %}
      volumes:
        - name: postgres-custom-config
          configMap:
            name: postgres-custom-config
        {%- if storage_type == 'lso' or odf_pvc == True %}
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: postgres-persistent-storage
        {%- endif %}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-deployment
  namespace: postgres-db
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
